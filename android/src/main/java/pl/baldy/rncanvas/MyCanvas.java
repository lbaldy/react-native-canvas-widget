package pl.baldy.rncanvas;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Rect;
import android.graphics.RectF;
import android.util.Base64;
import android.view.View;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;

public class MyCanvas extends View {

    Paint paint;
    ArrayList<Rect> rects = new ArrayList<>();
    Path path;
    ArrayList<Command> commands;
    Path.Direction direction = Path.Direction.CW;

    Integer[] startingPoint = new Integer[2];

    public MyCanvas(Context context, Command[] html5Commands) {
        super(context);
        commands = new ArrayList<>(Arrays.asList(html5Commands));
    }


    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);

        Iterator<Command> it;
        it = commands.iterator();
        paint = new Paint();

        Double[] doubleValues;
        String[] stringValues;


        while (it.hasNext()) {
            Command command = it.next();

            switch (command.getName()) {
                case "beginPath":
                    path = new Path();
                    paint = new Paint();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setStrokeWidth(6);
                    break;
                case "closePath":
                    path.close();
                    break;
                case "rect":
                    doubleValues = command.getValue().toArray(new Double[0]);
                    path.addRect(
                            new RectF(
                                    doubleValues[0].floatValue(),
                                    doubleValues[1].floatValue(),
                                    doubleValues[2].floatValue(),
                                    doubleValues[3].floatValue()),
                            direction);
                    break;
                case "lineTo":
                    doubleValues = command.getValue().toArray(new Double[0]);
                    path.lineTo(doubleValues[0].floatValue(), doubleValues[1].floatValue());
                    break;
                case "strokeStyle":
                    stringValues = command.getValue().toArray(new String[0]);
                    paint.setColor(Color.parseColor(stringValues[0]));
                    break;
                case "fill":
                    paint.setStyle(Paint.Style.FILL);
                    break;
                case "stroke":
                    canvas.drawPath(path, paint);
                    break;
                case "moveTo":
                    doubleValues = command.getValue().toArray(new Double[0]);
                    startingPoint[0] = doubleValues[0].intValue();
                    startingPoint[1] = doubleValues[1].intValue();
                    path.moveTo(doubleValues[0].intValue(), doubleValues[1].intValue());
                    break;
                case "bezierCurveTo":
                    doubleValues = command.getValue().toArray(new Double[0]);
                    path.cubicTo(
                            doubleValues[0].floatValue(),
                            doubleValues[1].floatValue(),

                            doubleValues[2].floatValue(),
                            doubleValues[3].floatValue(),

                            doubleValues[4].floatValue(),
                            doubleValues[5].floatValue()


                    );
                    break;
                case "quadraticCurveTo":
                    doubleValues = command.getValue().toArray(new Double[0]);
                    path.quadTo(
                            doubleValues[0].floatValue(),
                            doubleValues[1].floatValue(),
                            doubleValues[2].floatValue(),
                            doubleValues[3].floatValue()
                    );
                    break;
                case "arcTo":
                    doubleValues = command.getValue().toArray(new Double[0]);
                    float angleMultiplier = 1;
                    if (startingPoint[1] > doubleValues[1].floatValue()) {
                        angleMultiplier = -1;
                    }

                    path.arcTo(
                            (doubleValues[0].floatValue() - doubleValues[4].floatValue()) - doubleValues[4].floatValue(),
                            (doubleValues[1].floatValue() - doubleValues[4].floatValue()) - doubleValues[4].floatValue(),
                            (doubleValues[0].floatValue() - doubleValues[4].floatValue()) + doubleValues[4].floatValue(),
                            (doubleValues[1].floatValue() + doubleValues[4].floatValue()) + doubleValues[4].floatValue(),
                            0,
                            74 * angleMultiplier,
                            false
                    );
                    break;
                case "arc":
                    doubleValues = command.getValue().toArray(new Double[0]);
                    path.addArc(doubleValues[0].floatValue() - doubleValues[2].floatValue() / 2,
                            doubleValues[1].floatValue() - doubleValues[2].floatValue() / 2,
                            doubleValues[0].floatValue() + doubleValues[2].floatValue() / 2,
                            doubleValues[1].floatValue() + doubleValues[2].floatValue() / 2,
                            doubleValues[3].floatValue() * ((Double) (180 / Math.PI)).floatValue(),
                            doubleValues[4].floatValue() * ((Double) (180 / Math.PI)).floatValue());
                    break;
                // TRANSFORM
                case "scale":
                    doubleValues = command.getValue().toArray(new Double[0]);
                    canvas.scale(doubleValues[0].floatValue(), doubleValues[1].floatValue());
                    break;
                case "rotate":
                    doubleValues = command.getValue().toArray(new Double[0]);
                    canvas.rotate(doubleValues[0].floatValue() * ((Double) (180 / Math.PI)).floatValue());
                case "translate":
                    doubleValues = command.getValue().toArray(new Double[0]);
                    canvas.translate(doubleValues[0].floatValue(), doubleValues[1].floatValue());
                case "setTransform":
                    doubleValues = command.getValue().toArray(new Double[0]);
                    canvas.scale(doubleValues[0].floatValue(), doubleValues[3].floatValue());
                    canvas.translate(doubleValues[4].floatValue(), doubleValues[5].floatValue());
                    canvas.skew(doubleValues[2].floatValue(), doubleValues[1].floatValue());
                    break;
                // PROPERTIES
                case "fillStyle":
                    String[] values = command.getValue().toArray(new String[0]);
                    paint.setColor(Color.parseColor(values[0]));
                    break;

                // RECTANGLES
                case "fillRect":
                    doubleValues = command.getValue().toArray(new Double[0]);
                    canvas.drawRect(doubleValues[0].floatValue(), doubleValues[1].floatValue(), doubleValues[2].floatValue(), doubleValues[3].floatValue(), paint);
                    break;
                case "strokeRect":
                    doubleValues = command.getValue().toArray(new Double[0]);
                    Path rectPath = new Path();
                    Paint rectPaint = new Paint();
                    rectPaint.setColor(paint.getColor());
                    rectPaint.setStrokeWidth(paint.getStrokeWidth());
                    rectPaint.setStyle(Paint.Style.STROKE);
                    rectPath.addRect(
                            new RectF(
                                    doubleValues[0].floatValue(),
                                    doubleValues[1].floatValue(),
                                    doubleValues[2].floatValue(),
                                    doubleValues[3].floatValue()),
                            direction);
                    canvas.drawPath(rectPath, rectPaint);
                case "clearRect":
                    doubleValues = command.getValue().toArray(new Double[0]);
                    Paint white = new Paint();
                    white.setColor(Color.WHITE);
                    Rect clearRect = new Rect(doubleValues[0].intValue(), doubleValues[1].intValue(), doubleValues[0].intValue() + doubleValues[2].intValue(), doubleValues[1].intValue() + doubleValues[3].intValue());

                    canvas.drawRect(clearRect, white);
                    break;
                case "drawImage":
                    doubleValues = command.getValue().toArray(new Double[0]);
                    byte[] byteArray = Base64.decode("", Base64.DEFAULT);
                    Bitmap image = BitmapFactory.decodeByteArray(byteArray, 0, byteArray.length);

                    if (doubleValues.length > 2) {
                        Rect dst = new Rect();
                        Rect src = new Rect();
                        src.set(doubleValues[0].intValue(), doubleValues[1].intValue(), doubleValues[0].intValue() + doubleValues[2].intValue(), doubleValues[1].intValue() + doubleValues[3].intValue());
                        dst.set(doubleValues[4].intValue(), doubleValues[5].intValue(), doubleValues[4].intValue() + doubleValues[6].intValue(), doubleValues[5].intValue() + doubleValues[7].intValue());
                        canvas.drawBitmap(image, src, dst, paint);
                    } else {
                        canvas.drawBitmap(image, doubleValues[0].floatValue(), doubleValues[1].floatValue(), paint);
                    }

                    break;
            }


        }


    }

}
